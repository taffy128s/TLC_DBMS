package com.github.taffy128s.tlcdbms.sqlparsers;

import com.github.taffy128s.tlcdbms.CommandType;
import com.github.taffy128s.tlcdbms.DataType;
import com.github.taffy128s.tlcdbms.DataTypeIdentifier;

import java.util.ArrayList;

/**
 * Parse result generated by SQLParser.
 */
public class SQLParseResult {
    private CommandType mCommandType;
    private String mTablename;
    private ArrayList<String> mAttributeNames;
    private ArrayList<DataType> mAttributeTypes;
    private ArrayList<String> mBlocks;
    private ArrayList<String> mUpdateOrder;
    private int mPrimaryKeyIndex;
    private boolean mCustomOrder;
    private boolean mShowFullInfo;

    /**
     * Constructor. Initialize all members.
     */
    public SQLParseResult() {
        mCommandType = CommandType.NONE;
        mTablename = "";
        mAttributeNames = null;
        mAttributeTypes = null;
        mBlocks = null;
        mUpdateOrder = null;
        mPrimaryKeyIndex = -1;
        mCustomOrder = false;
        mShowFullInfo = false;
    }

    /**
     * CommandType setter.
     *
     * @param commandType command type to set.
     */
    public void setCommandType(CommandType commandType) {
        mCommandType = commandType;
    }

    /**
     * CommandType getter.
     *
     * @return command type.
     */
    public CommandType getCommandType() {
        return mCommandType;
    }

    /**
     * Tablename setter.
     *
     * @param tablename tablename to set.
     */
    public void setTablename(String tablename) {
        mTablename = tablename;
    }

    /**
     * Tablename getter.
     *
     * @return tablename.
     */
    public String getTablename() {
        return mTablename;
    }

    /**
     * AttributeNames setter.
     *
     * @param attributeNames a list of attribute names.
     */
    public void setAttributeNames(ArrayList<String> attributeNames) {
        mAttributeNames = attributeNames;
    }

    /**
     * AttributeNames getter.
     *
     * @return a list of attribute names.
     */
    public ArrayList<String> getAttributeNames() {
        return mAttributeNames;
    }

    /**
     * AttributeTypes setter.
     *
     * @param attributeTypes a list of attribute types.
     */
    public void setAttributeTypes(ArrayList<DataType> attributeTypes) {
        mAttributeTypes = attributeTypes;
    }

    /**
     * AttributeTypes getter.
     *
     * @return a list of attribute types.
     */
    public ArrayList<DataType> getAttributeTypes() {
        return mAttributeTypes;
    }

    /**
     * Blocks setter.
     *
     * @param blocks a list of data blocks.
     */
    public void setBlocks(ArrayList<String> blocks) {
        mBlocks = blocks;
    }

    /**
     * Blocks getter.
     *
     * @return a list of data blocks.
     */
    public ArrayList<String> getBlocks() {
        return mBlocks;
    }

    /**
     * UpdateOrder setter.
     *
     * @param updateOrder a list of string(attribute names).
     */
    public void setUpdateOrder(ArrayList<String> updateOrder) {
        mUpdateOrder = updateOrder;
    }

    /**
     * UpdateOrder getter.
     *
     * @return a list of string(attribute names).
     */
    public ArrayList<String> getUpdateOrder() {
        return mUpdateOrder;
    }

    /**
     * Primary key setter.
     *
     * @param primaryKeyIndex primary key to set.
     */
    public void setPrimaryKeyIndex(int primaryKeyIndex) {
        mPrimaryKeyIndex = primaryKeyIndex;
    }

    /**
     * Primary key getter.
     *
     * @return primary key.
     */
    public int getPrimaryKeyIndex() {
        return mPrimaryKeyIndex;
    }

    /**
     * CustomOrder setter.
     *
     * @param customOrder true if custom order exists, false otherwise.
     */
    public void setCustomOrder(boolean customOrder) {
        mCustomOrder = customOrder;
    }

    /**
     * Check custom order flag.
     *
     * @return true if custom order exists, false otherwise.
     */
    public boolean isCustomOrder() {
        return mCustomOrder;
    }

    /**
     * ShowFullInfo setter.
     *
     * @param showFullInfo value to set.
     */
    public void setShowFullInfo(boolean showFullInfo) {
        mShowFullInfo = showFullInfo;
    }

    /**
     * ShowFullInfo getter.
     *
     * @return true if show, false otherwise.
     */
    public boolean getShowFullInfo() {
        return mShowFullInfo;
    }

    @Override
    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        if (mCommandType == CommandType.CREATE) {
            stringBuilder.append("CREATE\n");
            stringBuilder.append("Table ").append(mTablename).append("\n");
            stringBuilder.append("Attribute names\n");
            for (String name : mAttributeNames) {
                stringBuilder.append(name).append(" ");
            }
            stringBuilder.append("\n");
            stringBuilder.append("Attribute types\n");
            for (DataType type : mAttributeTypes) {
                if (type.getType() == DataTypeIdentifier.INT) {
                    stringBuilder.append("INT ");
                } else {
                    stringBuilder.append("VARCHAR ").append(type.getLimit());
                }
            }
            stringBuilder.append("\n");
            stringBuilder.append("PRIMARY KEY INDEX " + mPrimaryKeyIndex + "\n");
        } else {
            stringBuilder.append("INSERT\n");
            stringBuilder.append("Table ").append(mTablename).append("\n");
            stringBuilder.append("Block content\n");
            for (String block : mBlocks) {
                stringBuilder.append(block).append(" ");
            }
            stringBuilder.append("\n");
            if (mCustomOrder) {
                stringBuilder.append("Custom order\n");
                for (String attrName : mUpdateOrder) {
                    stringBuilder.append(attrName).append(" ");
                }
                stringBuilder.append("\n");
            }
        }
        return stringBuilder.toString();
    }
}
