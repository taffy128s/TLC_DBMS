package com.github.taffy128s.tlcdbms;

import com.github.taffy128s.tlcdbms.sqlparsers.SQLParseResult;
import java.io.*;
import java.util.*;

/**
 * Database manager.
 * Check the result generated by parser, and pass it to table(if valid).
 */
public class DBManager implements DiskWritable {
    /**
     * Null output stream. Output will be ignored.
     */
    private static class NullOutputStream extends PrintStream {
        /**
         * Default constructor.
         */
        public NullOutputStream() {
            super(new OutputStream() {
                @Override
                public void write(int b) throws IOException {

                }
            });
        }
    }

    public static final String FILENAME = "dbtables.tlc";
    public static final String DIRNAME = "dbtlc";

    private HashMap<String, Table> mTables;
    private HashMap<String, Table> mQueryTables;
    private HashMap<String, Boolean> mTableModified;

    /**
     * Initialize.
     */
    public DBManager() {
        mTables = new HashMap<>();
        mTableModified = new HashMap<>();
    }

    /**
     * Do CREATE.
     *
     * @param parameter parse result generated by parser.
     */
    public void create(SQLParseResult parameter) {
        String tablename = parameter.getTablename();
        ArrayList<String> attributeNames = parameter.getAttributeNames();
        ArrayList<DataType> attributeTypes = parameter.getAttributeTypes();
        ArrayList<TableStructure> attributeIndices = parameter.getAttributeIndices();
        int primaryKey = parameter.getPrimaryKeyIndex();
        if (mTables.containsKey(tablename)) {
            System.out.println("Table '" + tablename + "' already exists.");
            return;
        }
        Table newTable = new MultiIndexTable(tablename, attributeNames, attributeTypes, attributeIndices, primaryKey, -1);
        mTables.put(tablename, newTable);
        mTableModified.put(tablename, Boolean.TRUE);
        appendTableToTableList(FILENAME, tablename);
        mTables.get(tablename).writeToDisk("./" + DIRNAME + "/" + tablename + ".tlctable");
        System.out.println("Query OK, table '" + tablename + "' created successfully.");
    }

    /**
     * Do INSERT.
     *
     * @param parameter parse result generated by parser.
     */
    public void insert(SQLParseResult parameter) {
        String tablename = parameter.getTablename();
        if (!mTables.containsKey(tablename)) {
            System.out.println("Table '" + tablename + "' not exists.");
            return;
        }
        ArrayList<DataRecord> dataRecords = generateDataRecord(parameter);
        if (dataRecords == null || dataRecords.isEmpty()) {
            return;
        }
        int succeed = 0;
        int failed = 0;
        for (DataRecord dataRecord : dataRecords) {
            if (dataRecords.size() > 1) {
                System.out.print("Inserting " + dataRecord.toString() + "... ");
            }
            InsertionResult checkResult = mTables.get(tablename).checkInputData(dataRecord);
            if (checkResult == InsertionResult.DUPLICATED_DATA_TUPLE) {
                System.out.println("Data tuple already exists in table.");
                ++failed;
            } else if (checkResult == InsertionResult.NULL_PRIMARY_KEY) {
                System.out.println("Primary Key field cannot be null.");
                ++failed;
            } else if (checkResult == InsertionResult.DUPLICATED_PRIMARY_KEY) {
                int primaryKeyIndex = mTables.get(tablename).getPrimaryKey();
                System.out.println("Primary Key " + dataRecord.get(primaryKeyIndex) + " already exists in table.");
                ++failed;
            } else {
                if (dataRecords.size() > 1) {
                    System.out.println("Success");
                }
                mTables.get(tablename).insert(dataRecord);
                ++succeed;
            }
        }
        if (succeed == 1) {
            System.out.println("Query OK, table '" + tablename + "': 1 row added.");
        } else if (succeed > 1) {
            System.out.println("Query OK, table '" + tablename + "': " + succeed + " rows added.");
        }
        if (failed > 0 && succeed + failed > 1) {
            System.out.print("Records: " + (succeed + failed) + "  ");
            System.out.print("Succeed: " + succeed + "  ");
            System.out.println("Failed: " + failed);
        }
        if (succeed > 0) {
            mTableModified.put(tablename, Boolean.TRUE);
        }
    }

    /**
     * Do SELECT.
     *
     * @param parameter parse result generated by parser.
     */
    public void select(SQLParseResult parameter) {
        mQueryTables = new HashMap<>();
        innerSelect(parameter);
        mQueryTables = new HashMap<>();
    }

    /**
     * Do SELECT.
     * Separate function to let select() clean up mQueryTables.
     *
     * @param parameter parse result generated by parser.
     */
    private void innerSelect(SQLParseResult parameter) {
        String randomTablename = "";
        HashMap<String, String> aliasMap = parameter.getTableAliases();
        for (String tableName : parameter.getTablenames()) {
        	if (!mTables.containsKey(tableName)) {
        		System.out.println("Table '" + tableName + "' doesn't exist.");
        		return;
        	}
        }
        for (String alias : aliasMap.keySet()) {
            if (randomTablename.equalsIgnoreCase("")) {
                randomTablename = alias;
            }
            mQueryTables.put(alias, mTables.get(aliasMap.get(alias)).generateAliasTable(alias));
        }
        if (parameter.getConditions() == null) {
            parameter.setConditions(new ArrayList<>());
        }
        for (Condition condition : parameter.getConditions()) {
            if (condition.getOperator() == BinaryOperator.AND || condition.getOperator() == BinaryOperator.OR) {
                continue;
            }
            if (!setConditionParameters(condition, parameter)) {
                return;
            }
        }
        if (!setTargetsParameters(parameter)) {
            return;
        }
        if (!setGroupTarget(parameter)) {
            return;
        }
        if (!setSortingTarget(parameter)) {
            return;
        }
        if (!checkGroupBy(parameter)) {
            return;
        }
        Stack<Table> selectedTables = new Stack<>();
        if (parameter.getConditions().isEmpty()) {
            selectedTables.push(mQueryTables.get(randomTablename).query(Condition.getAlwaysTrueCondition()));
        } else {
            for (Condition condition : parameter.getConditions()) {
                if (condition.getOperator() == BinaryOperator.AND) {
                    Table second = selectedTables.pop();
                    Table first = selectedTables.pop();
                    selectedTables.push(Table.intersect(first, second, mQueryTables));
                } else if (condition.getOperator() == BinaryOperator.OR) {
                    Table second = selectedTables.pop();
                    Table first = selectedTables.pop();
                    selectedTables.push(Table.union(first, second, mQueryTables));
                } else if (condition.getLeftConstant() != null && condition.getRightConstant() != null) {
                    selectedTables.push(mQueryTables.get(randomTablename).query(condition));
                } else if (condition.getLeftConstant() != null && condition.getRightConstant() == null) {
                    selectedTables.push(mQueryTables.get(condition.getRightTableName()).query(condition));
                } else if (condition.getLeftConstant() == null && condition.getRightConstant() != null) {
                    selectedTables.push(mQueryTables.get(condition.getLeftTableName()).query(condition));
                } else if (condition.getLeftConstant() == null && condition.getRightConstant() == null) {
                    if (!condition.getLeftTableName().equals(condition.getRightTableName())) {
                        selectedTables.push(Table.join(mQueryTables.get(condition.getLeftTableName()), mQueryTables.get(condition.getRightTableName()), condition));
                    } else {
                        selectedTables.push(mQueryTables.get(condition.getLeftTableName()).query(condition));
                    }
                }
            }
        }
        Table resultTable = selectedTables.pop();
        for (String tablename : aliasMap.keySet()) {
            if (!resultTable.getSourceTables().contains(tablename)) {
                resultTable = Table.join(resultTable, mQueryTables.get(tablename), Condition.getAlwaysTrueCondition());
            }
        }
        ArrayList<DataRecord> allRecords;
        if (parameter.getAttributeNames() != null) {
            ArrayList<Integer> sortIndices = new ArrayList<>();
            for (String target : parameter.getAttributeNames()) {
                int sortIndex = resultTable.getAttributeNames().indexOf(target);
                sortIndices.add(sortIndex);
            }
            allRecords = resultTable.getAllRecords(sortIndices, parameter.getShowSortTypes());
        } else {
            allRecords = resultTable.getAllRecords();
        }
        ArrayList<String> targetAttributeNames = new ArrayList<>();
        ArrayList<DataType> targetAttributeTypes = new ArrayList<>();
        ArrayList<Integer> targetIndices = new ArrayList<>();
        ArrayList<QueryType> targetQueryTypes = new ArrayList<>();
        for (int i = 0; i < parameter.getTargets().size(); ++i) {
            Target target = parameter.getTargets().get(i);
            String targetAttributeName = "";
            if (target.getTableName() != null) {
                targetAttributeName += target.getTableName() + ".";
            }
            if (!target.getAttribute().equals("*")) {
                targetAttributeName += target.getAttribute();
            }
            if (target.getTableName() == null && target.getAttribute().equals("*")) {
                if (parameter.getQueryTypes().get(i) == QueryType.NORMAL) {
                    for (int j = 0; j < resultTable.getAttributeNames().size(); ++j) {
                        targetAttributeNames.add(resultTable.getAttributeNames().get(j));
                        targetAttributeTypes.add(resultTable.getAttributeTypes().get(j));
                        targetIndices.add(j);
                        targetQueryTypes.add(parameter.getQueryTypes().get(i));
                    }
                } else {
                    targetAttributeNames.add("count(*)");
                    targetAttributeTypes.add(new DataType(DataTypeIdentifier.INT, -1));
                    targetIndices.add(-1);
                    targetQueryTypes.add(parameter.getQueryTypes().get(i));
                }
            } else if (target.getTableName() != null && target.getAttribute().equals("*")) {
                for (int j = 0; j < resultTable.getAttributeNames().size(); ++j) {
                    if (resultTable.getAttributeNames().get(j).startsWith(targetAttributeName)) {
                        targetAttributeNames.add(resultTable.getAttributeNames().get(j));
                        targetAttributeTypes.add(resultTable.getAttributeTypes().get(j));
                        targetIndices.add(j);
                        targetQueryTypes.add(parameter.getQueryTypes().get(i));
                    }
                }
            } else {
                int index = resultTable.getAttributeNames().indexOf(targetAttributeName);
                if (parameter.getQueryTypes().get(i) == QueryType.NORMAL) {
                    targetAttributeNames.add(targetAttributeName);
                    targetAttributeTypes.add(resultTable.getAttributeTypes().get(index));
                } else if (parameter.getQueryTypes().get(i) == QueryType.COUNT) {
                    targetAttributeNames.add("count(" + targetAttributeName + ")");
                    targetAttributeTypes.add(new DataType(DataTypeIdentifier.INT, -1));
                } else {
                    targetAttributeNames.add("sum(" + targetAttributeName + ")");
                    targetAttributeTypes.add(new DataType(DataTypeIdentifier.INT, -1));
                }
                targetIndices.add(index);
                targetQueryTypes.add(parameter.getQueryTypes().get(i));
            }
        }
        ArrayList<DataRecord> finalResult = new ArrayList<>();
        for (DataRecord record : allRecords) {
            DataRecord result = new DataRecord();
            for (int i = 0; i < targetIndices.size(); ++i) {
                int index = targetIndices.get(i);
                QueryType type = targetQueryTypes.get(i);
                if (type != QueryType.NORMAL) {
                    result.append(0);
                } else {
                    result.append(record.get(index));
                }
            }
            finalResult.add(result);
        }
        boolean targetHasFunction = false;
        for (QueryType queryType : targetQueryTypes) {
            if (queryType != QueryType.NORMAL) {
                targetHasFunction = true;
            }
        }
        if (targetHasFunction || parameter.getGroupTargets() != null) {
            if (!postCheckGroupBy(targetAttributeNames, targetQueryTypes, parameter.getGroupTargets())) {
                return;
            }
            ArrayList<Integer> groupIndices = new ArrayList<>();
            ArrayList<Integer> functionIndices = new ArrayList<>();
            if (parameter.getGroupTargets() != null) {
                for (String groupTarget : parameter.getGroupTargets()) {
                    groupIndices.add(resultTable.getAttributeNames().indexOf(groupTarget));
                }
            }
            for (int i = 0; i < targetQueryTypes.size(); ++i) {
                if (targetQueryTypes.get(i) != QueryType.NORMAL) {
                    functionIndices.add(i);
                }
            }
            HashMap<DataRecord, DataRecord> groupMap = new HashMap<>();
            ArrayList<DataRecord> groupedRecords = new ArrayList<>();
            for (int i = 0; i < finalResult.size(); ++i) {
                DataRecord record = finalResult.get(i);
                DataRecord origin = allRecords.get(i);
                DataRecord key = new DataRecord();
                for (int index : groupIndices) {
                    key.append(origin.get(index));
                }
                if (!groupMap.containsKey(key)) {
                    groupMap.put(key, record);
                    groupedRecords.add(record);
                }
                for (int index : functionIndices) {
                    if (targetQueryTypes.get(index) == QueryType.COUNT) {
                        int targetIndex = targetIndices.get(index);
                        if (targetIndex == -1 || origin.get(targetIndex) != null) {
                            Integer counter = (Integer) groupMap.get(key).get(index);
                            counter = counter + 1;
                            groupMap.get(key).set(index, counter);
                        }
                    } else {
                        int targetIndex = targetIndices.get(index);
                        if (origin.get(targetIndex) != null) {
                            Integer adder = (Integer) groupMap.get(key).get(index);
                            adder = adder + (Integer) origin.get(targetIndex);
                            groupMap.get(key).set(index, adder);
                        }
                    }
                }
            }
            finalResult = groupedRecords;
        }
        if (parameter.getShowRowLimitation() != -1) {
            int limitation = Math.min(parameter.getShowRowLimitation(), finalResult.size());
            finalResult.subList(limitation, finalResult.size()).clear();
        }
        printTable(targetAttributeNames, targetAttributeTypes, finalResult);
    }

    /**
     * Do DROP.
     *
     * @param parameter parse result generated by parser.
     */
    public void drop(SQLParseResult parameter) {
        ArrayList<String> tablenames = parameter.getTablenames();
        if (tablenames.get(0) == null) {
            Set<String> keys = mTables.keySet();
            int counts = 0;
            for (String key : keys) {
                File tableFile = new File("./" + DIRNAME + "/" + key + ".tlctable");
                if (tableFile.exists()) {
                    if (!tableFile.delete()) {
                        System.err.println("Error occurred when deleting table file " + key);
                    }
                }
                System.out.println("Table '" + key + "' dropped.");
                ++counts;
                mTables.remove(key);
            }
            System.out.println("Query OK, " + counts + " rows affected.");
        } else {
            int counts = 0;
            for (String tablename : tablenames) {
                if (!mTables.containsKey(tablename)) {
                    System.out.println("Table '" + tablename + "' not exists.");
                } else {
                    File tableFile = new File("./" + DIRNAME + "/" + tablename + ".tlctable");
                    if (tableFile.exists()) {
                        if (!tableFile.delete()) {
                            System.err.println("Error occurred when deleting table file " + tablename);
                        }
                    }
                    System.out.println("Table '" + tablename + "' dropped.");
                    ++counts;
                    mTables.remove(tablename);
                }
            }
            System.out.println("Query OK, " + counts + " rows affected.");
        }
    }

    /**
     * Do SHOW table lists.
     *
     * @param parameter parse result generated by parser.
     */
    public void showTableList(SQLParseResult parameter) {
        ArrayList<String> showAttr = new ArrayList<>();
        ArrayList<DataType> showType = new ArrayList<>();
        showAttr.add("Tablename");
        showType.add(new DataType(DataTypeIdentifier.VARCHAR, 40));
        Object[] tablenames = mTables.keySet().toArray();
        ArrayList<DataRecord> records = new ArrayList<>();
        for (int i = 0; i < tablenames.length; ++i) {
            DataRecord record = new DataRecord();
            record.append(tablenames[i].toString());
            records.add(record);
        }
        printTable(showAttr, showType, records);
    }

    /**
     * Do SHOW table content.
     *
     * @param parameter parse result generated by parser.
     */
    public void showTableContent(SQLParseResult parameter) {
        String tablename = parameter.getTablename();
        if (!mTables.containsKey(tablename)) {
            System.out.println("Table '" + tablename + "' not exists.");
            return;
        }
        ArrayList<String> attributeNames = mTables.get(tablename).getAttributeNames();
        ArrayList<DataType> attributeTypes = mTables.get(tablename).getAttributeTypes();
        ArrayList<DataRecord> allRecords;
        if (parameter.getAttributeNames() != null) {
            ArrayList<Integer> sortIndices = new ArrayList<>();
            for (String sortAttributeName : parameter.getAttributeNames()) {
                final int sortIndex = attributeNames.indexOf(sortAttributeName);
                if (sortIndex == -1) {
                    System.out.println("Attribute " + sortAttributeName + " not exists in table " + tablename);
                    return;
                }
                sortIndices.add(sortIndex);
            }
            allRecords = mTables.get(tablename).getAllRecords(sortIndices, parameter.getShowSortTypes());
        } else {
            allRecords = mTables.get(tablename).getAllRecords();
        }
        if (parameter.getShowRowLimitation() != -1) {
            int startIndex = Math.min(parameter.getShowRowLimitation(), allRecords.size());
            allRecords.subList(startIndex, allRecords.size()).clear();
        }
        printTable(attributeNames, attributeTypes, allRecords);
    }

    /**
     * Do DESC.
     *
     * @param parameter parse result generated by parser.
     */
    public void desc(SQLParseResult parameter) {
        String tablename = parameter.getTablename();
        if (!mTables.containsKey(tablename)) {
            System.out.println("Table '" + tablename + "' not exists.");
            return;
        }
        ArrayList<String> attributeNames = mTables.get(tablename).getAttributeNames();
        ArrayList<DataType> attributeTypes = mTables.get(tablename).getAttributeTypes();
        ArrayList<String> showAttr = new ArrayList<>();
        ArrayList<DataType> showType = new ArrayList<>();
        showAttr.add("Name");
        showAttr.add("Type");
        showAttr.add("Key");
        showType.add(new DataType(DataTypeIdentifier.VARCHAR, 40));
        showType.add(new DataType(DataTypeIdentifier.VARCHAR, 40));
        showType.add(new DataType(DataTypeIdentifier.VARCHAR, 40));
        ArrayList<DataRecord> records = new ArrayList<>();
        for (int i = 0; i < attributeNames.size(); ++i) {
            DataRecord record = new DataRecord();
            record.append(attributeNames.get(i));
            record.append(attributeTypes.get(i));
            TableFieldType fieldType = mTables.get(tablename).getFieldType(i);
            if (fieldType == TableFieldType.PRIMARY_KEY) {
                record.append("PRI");
            } else if (fieldType == TableFieldType.KEY) {
                record.append("KEY");
            } else {
                record.append("");
            }
            records.add(record);
        }
        printTable(showAttr, showType, records);
    }

    /**
     * Do LOAD.
     *
     * @param parameter parse result generated by parser.
     */
    public void load(SQLParseResult parameter) {
        PrintStream originStdout = System.out;
        if (!parameter.getShowFullInfo()) {
            System.setOut(new NullOutputStream());
        }
        FileInterpreter fileInterpreter = new FileInterpreter(parameter.getFilename(), this);
        fileInterpreter.start();
        System.setOut(originStdout);
        System.out.println("Script file '" + parameter.getFilename() + "' loaded successfully.");
    }

    private boolean appendTableToTableList(String filename, String newTablename) {
        File parentDirectory = new File(DIRNAME);
        if (!parentDirectory.exists()) {
            boolean result = parentDirectory.mkdir();
            if (!result) {
                System.err.println("./" + DIRNAME + "/: creation error.");
                return false;
            }
        }
        filename = "./" + DIRNAME + "/" + filename;
        try {
            FileWriter writer = new FileWriter(filename, true);
            writer.write(newTablename + "\0");
            writer.write(mTables.get(newTablename).getTableType() + "\n");
            writer.close();
        } catch (IOException e) {
            System.err.println(filename + ": file I/O error.");
        }
        return false;
    }

    /**
     * Generate a DataRecord with given data.
     *
     * @param parameter parse result generated by parser.
     * @return a DataRecord if succeed, null if failed.
     */
    private ArrayList<DataRecord> generateDataRecord(SQLParseResult parameter) {
        Table table = mTables.get(parameter.getTablename());
        ArrayList<String> attributeNames = table.getAttributeNames();
        ArrayList<DataType> attributeTypes = table.getAttributeTypes();
        ArrayList<String> attributeStrings = new ArrayList<>();
        ArrayList<Integer> orderIndex = new ArrayList<>();
        for (int i = 0; i < attributeNames.size(); ++i) {
            if (i == table.getPrimaryKey()) {
                attributeStrings.add(attributeNames.get(i) + " " + attributeTypes.get(i) + " PRI");
            } else {
                attributeStrings.add(attributeNames.get(i) + " " + attributeTypes.get(i));
            }
        }
        int expectedSize = attributeNames.size();
        for (int i = 0; i < parameter.getBlocks().size(); ++i) {
            int gotSize = parameter.getBlocks().get(i).size();
            if (!parameter.isCustomOrder() && expectedSize != gotSize) {
                System.out.println("Input data tuple size doesn't match table attributes.");
                System.out.println("Table '" + parameter.getTablename() + "' attributes: " + String.join(", ", attributeStrings));
                System.out.println("Expected: " + expectedSize + ".");
                System.out.println("Given: " + gotSize + ".");
                return null;
            }
        }
        if (parameter.isCustomOrder()) {
            for (String attrName : attributeNames) {
                int index = parameter.getUpdateOrder().indexOf(attrName);
                orderIndex.add(index);
            }
            for (String attrName : parameter.getUpdateOrder()) {
                int index = attributeNames.indexOf(attrName);
                if (index == -1) {
                    System.out.println("Attribute '" + attrName + "' not found in table '" + parameter.getTablename() + "'.");
                    return null;
                }
            }
        } else {
            for (int i = 0; i < attributeNames.size(); ++i) {
                orderIndex.add(i);
            }
        }
        ArrayList<DataRecord> dataRecords = new ArrayList<>();
        for (int i = 0; i < parameter.getBlocks().size(); ++i) {
            DataRecord dataRecord = new DataRecord();
            int tableAttrIndex = 0;
            for (int index : orderIndex) {
                String block = (index != -1) ? parameter.getBlocks().get(i).get(index) : null;
                if (block == null) {
                    dataRecord.append(null);
                } else if (attributeTypes.get(tableAttrIndex).getType() == DataTypeIdentifier.INT) {
                    if (!DataChecker.isValidInteger(block)) {
                        System.out.println("For attribute '" + attributeNames.get(tableAttrIndex) + "' in table '" + parameter.getTablename() + "':");
                        System.out.println("Wrong input type (INT expected): " + block + ".");
                        return null;
                    }
                    dataRecord.append(Integer.parseInt(block));
                } else {
                    int lengthLimit = attributeTypes.get(tableAttrIndex).getLimit();
                    if (!DataChecker.isValidQuotedVarChar(block)) {
                        System.out.println("For attribute '" + attributeNames.get(tableAttrIndex) + "' in table '" + parameter.getTablename() + "':");
                        System.out.println("Wrong input type (VARCHAR(" + lengthLimit + ") expected): " + block + ".");
                        return null;
                    }
                    String varcharPart = block.substring(1, block.length() - 1);
                    if (!DataChecker.isValidVarChar(varcharPart, lengthLimit)) {
                        System.out.println("For attribute '" + attributeNames.get(tableAttrIndex) + "' in table '" + parameter.getTablename() + "':");
                        System.out.print("Wrong input type (VARCHAR(" + lengthLimit + ") expected): " + block);
                        System.out.println(" with length " + varcharPart.length() + ".");
                        return null;
                    }
                    dataRecord.append(block);
                }
                ++tableAttrIndex;
            }
            dataRecords.add(dataRecord);
        }
        return dataRecords;
    }

    /**
     * Fill all fields in conditions such as tablenames.
     *
     * @param condition condition to process.
     * @param parameter parse result generated by parser.
     * @return true if succeed, false if failed.
     */
    private boolean setConditionParameters(Condition condition, SQLParseResult parameter) {
        DataTypeIdentifier leftType = null;
        DataTypeIdentifier rightType = null;
        boolean leftIsNull = false;
        boolean rightIsNull = false;
        if (condition.getLeftConstant() == null) {
            if (condition.getLeftTableName() == null) {
                int found = -1;
                for (String tableName : parameter.getTableAliases().keySet()) {
                    int index = mQueryTables.get(tableName).getAttributeNames().indexOf(condition.getLeftAttribute());
                    if (index != -1 && found != -1) {
                        System.out.println("Attribute '" + condition.getLeftAttribute() + "' is ambiguous.");
                        return false;
                    }
                    if (index != -1) {
                    	leftType = mQueryTables.get(tableName).getAttributeTypes().get(index).getType();
                        condition.setLeftTableName(tableName);
                        found = index;
                    }
                }
                if (found == -1) {
                    System.out.println("Attribute '" + condition.getLeftAttribute() + "' don't exist in any tables.");
                    return false;
                }
            }
            else {
                if (!mQueryTables.containsKey(condition.getLeftTableName())) {
                    System.out.println("Table '" + condition.getLeftTableName() + "' doesn't exist.");
                    return false;
                }
                int index = mQueryTables.get(condition.getLeftTableName()).getAttributeNames().indexOf(condition.getLeftAttribute());
                if (index == -1) {
                    System.out.println("Attribute '" + condition.getLeftAttribute() + "' of Table " +
                                               condition.getLeftTableName() + " doesn't exist.");
                    return false;
                }
                leftType = mQueryTables.get(condition.getLeftTableName()).getAttributeTypes().get(index).getType();
            }
        }
        else {
            leftIsNull = DataChecker.isStringNull(condition.getLeftConstant());
            leftType = (DataChecker.isValidInteger(condition.getLeftConstant())) ? DataTypeIdentifier.INT : DataTypeIdentifier.VARCHAR;
        }
        if (condition.getRightConstant() == null) {
            if (condition.getRightTableName() == null) {
                int found = -1;
                for (String tableName : parameter.getTableAliases().keySet()) {
                    int index = mQueryTables.get(tableName).getAttributeNames().indexOf(condition.getRightAttribute());
                    if (index != -1 && found != -1) {
                        System.out.println("Attribute '" + condition.getRightAttribute() + "' is ambiguous.");
                        return false;
                    }
                    if (index != -1) {
                        rightType = mQueryTables.get(tableName).getAttributeTypes().get(index).getType();
                        condition.setRightTableName(tableName);
                        found = index;
                    }
                }
                if (found == -1) {
                    System.out.println("Attribute '" + condition.getRightAttribute() + "' don't exist in any tables.");
                    return false;
                }
            }
            else {
                if (!mQueryTables.containsKey(condition.getRightTableName())) {
                    System.out.println("Table '" + condition.getRightTableName() + "' doesn't exist.");
                    return false;
                }
                int index = mQueryTables.get(condition.getRightTableName()).getAttributeNames().indexOf(condition.getRightAttribute());
                if (index == -1) {
                    System.out.println("Attribute '" + condition.getRightAttribute() + "' of Table " +
                                               condition.getRightTableName() + " doesn't exist.");
                    return false;
                }
                rightType = mQueryTables.get(condition.getRightTableName()).getAttributeTypes().get(index).getType();
            }
        }
        else {
            rightIsNull = DataChecker.isStringNull(condition.getRightConstant());
            rightType = (DataChecker.isValidInteger(condition.getRightConstant())) ? DataTypeIdentifier.INT : DataTypeIdentifier.VARCHAR;
        }
        if (leftIsNull && !rightIsNull) {
            leftType = rightType;
        } else if (!leftIsNull && rightIsNull) {
            rightType = leftType;
        }
        if (leftType != rightType) {
            System.out.println("The types in the condition are different.");
            System.out.println("Left: " + (leftType == DataTypeIdentifier.INT ? "INT" : "VARCHAR"));
            System.out.println("Right: " + (rightType == DataTypeIdentifier.INT ? "INT" : "VARCHAR"));
            return false;
        }
        return true;
    }

    /**
     * Fill grouping target parameter.
     *
     * @param parameter parse result generated by parser.
     * @return true if succeed, false if failed.
     */
    private boolean setGroupTarget(SQLParseResult parameter) {
        if (parameter.getGroupTargets() == null) {
            return true;
        }
        for (int i = 0; i < parameter.getGroupTargets().size(); ++i) {
            String target = parameter.getGroupTargets().get(i);
            String[] split = target.split("\\.");
            String tablename = null;
            String attribute;
            if (split.length == 1) {
                attribute = split[0];
            } else {
                tablename = split[0];
                attribute = split[1];
            }
            if (tablename == null) {
                int found = -1;
                for (String table : parameter.getTableAliases().keySet()) {
                    int index = mQueryTables.get(table).getAttributeNames().indexOf(attribute);
                    if (index != -1 && found != -1) {
                        System.out.println("Group attribute '" + target + "' is ambiguous.");
                        return false;
                    }
                    if (index != -1) {
                        found = index;
                        tablename = table;
                    }
                }
            } else {
                if (!parameter.getTableAliases().containsKey(tablename)) {
                    System.out.println("Table '" + tablename + "' not exists.");
                    return false;
                }
                if (mQueryTables.get(tablename).getAttributeNames().indexOf(attribute) == -1) {
                    System.out.println("Group Attribute '" + attribute + "' not exists in table " + tablename);
                    return false;
                }
            }
            parameter.getGroupTargets().set(i, tablename + "." + attribute);
        }
        return true;
    }

    /**
     * Fill sorting target parameter.
     *
     * @param parameter parse result generated by parser.
     * @return true if succeed, false if failed.
     */
    private boolean setSortingTarget(SQLParseResult parameter) {
        if (parameter.getAttributeNames() == null) {
            return true;
        }
        for (int i = 0; i < parameter.getAttributeNames().size(); ++i) {
            String target = parameter.getAttributeNames().get(i);
            String[] split = target.split("\\.");
            String tablename = null;
            String attribute;
            if (split.length == 1) {
                attribute = split[0];
            } else {
                tablename = split[0];
                attribute = split[1];
            }
            if (tablename == null) {
                int found = -1;
                for (String table : parameter.getTableAliases().keySet()) {
                    int index = mQueryTables.get(table).getAttributeNames().indexOf(attribute);
                    if (index != -1 && found != -1) {
                        System.out.println("Sort attribute '" + target + "' is ambiguous.");
                        return false;
                    }
                    if (index != -1) {
                        found = index;
                        tablename = table;
                    }
                }
            } else {
                if (!parameter.getTableAliases().containsKey(tablename)) {
                    System.out.println("Table '" + tablename + "' not exists.");
                    return false;
                }
                if (mQueryTables.get(tablename).getAttributeNames().indexOf(attribute) == -1) {
                    System.out.println("Sort Attribute '" + attribute + "' not exists in table " + tablename);
                    return false;
                }
            }
            parameter.getAttributeNames().set(i, tablename + "." + attribute);
        }
        return true;
    }

    /**
     * Fill all fields in targets such as tablenames.
     *
     * @param parameter parse result generated by parser.
     * @return true if succeed, false if failed.
     */
    private boolean setTargetsParameters(SQLParseResult parameter) {
        boolean selectAll = false;
        boolean selectPart = false;
        int scanIndex = -1;
        for (Target target : parameter.getTargets()) {
            ++scanIndex;
            if (target.getTableName() == null) {
                boolean found = false;
                if (target.getAttribute().equals("*")) {
                    if (selectAll || selectPart) {
                        System.out.println("Duplicate * query.");
                        return false;
                    }
                    selectAll = true;
                    continue;
                }
                for (String tableName : parameter.getTableAliases().keySet()) {
                    if (mQueryTables.get(tableName).getAttributeNames().contains(target.getAttribute())) {
                        if (found) {
                            System.out.println("Attribute '" + target.getAttribute() + "' is ambiguous.");
                            return false;
                        }
                        target.setTableName(tableName);
                        found = true;
                        int index = mQueryTables.get(tableName).getAttributeNames().indexOf(target.getAttribute());
                        if (parameter.getQueryTypes().get(scanIndex) == QueryType.SUM && mQueryTables.get(tableName).getAttributeTypes().get(index).getType() != DataTypeIdentifier.INT) {
                            System.out.println("Aggregation function SUM() cannot be applied to type VARCHAR.");
                            return false;
                        }
                    }
                }
            }
            else {
                if (target.getAttribute().equals("*")) {
                	if (selectAll) {
                        System.out.println("Duplicate * query.");
                        return false;
                    }
                	selectPart = true;
                    continue;
                }
                if (!mQueryTables.containsKey(target.getTableName())) {
                    System.out.println("Table '" + target.getTableName() + "' doesn't exist.");
                    return false;
                }
                if (!mQueryTables.get(target.getTableName()).getAttributeNames().contains(target.getAttribute())) {
                    System.out.println("Attribute '" + target.getAttribute() + "' of Table " + target.getTableName() + " doesn't exist.");
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Check whether group by has correct value set.
     *
     * @param parameter parse result from parser.
     * @return true if valid, false if invalid.
     */
    private boolean checkGroupBy(SQLParseResult parameter) {
        boolean hasFunction = false;
        for (QueryType type : parameter.getQueryTypes()) {
            if (type != QueryType.NORMAL) {
                hasFunction = true;
            }
        }
        if (!hasFunction && parameter.getGroupTargets() == null) {
            return true;
        }
        HashSet<String> groups = new HashSet<>();
        if (parameter.getGroupTargets() != null) {
            for (String target : parameter.getGroupTargets()) {
                if (groups.contains(target)) {
                    System.out.println("Duplicated group target " + target);
                    return false;
                }
                groups.add(target);
            }
        }
        for (int i = 0; i < parameter.getTargets().size(); ++i) {
            if (parameter.getQueryTypes().get(i) == QueryType.NORMAL) {
                Target target = parameter.getTargets().get(i);
                if (target.getTableName() == null && target.getAttribute().equals("*")) {
                    continue;
                }
                String attributeFullName = target.getTableName() + "." + target.getAttribute();
                if (!groups.contains(attributeFullName)) {
                    System.out.println("Target " + attributeFullName + " should be in group by clause.");
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Check whether group by has correct value set.
     *
     * @param targetNames final target names.
     * @param queryTypes query type of each target name.
     * @param groupTargets group target names.
     * @return true if valid, false if invalid.
     */
    private boolean postCheckGroupBy(ArrayList<String> targetNames, ArrayList<QueryType> queryTypes, ArrayList<String> groupTargets) {
        HashSet<String> groupSet = new HashSet<>();
        if (groupTargets != null) {
            for (String target : groupTargets) {
                groupSet.add(target);
            }
        }
        for (int i = 0; i < targetNames.size(); ++i) {
            if (queryTypes.get(i) == QueryType.NORMAL) {
                if (!groupSet.contains(targetNames.get(i))) {
                    System.out.println("Target " + targetNames.get(i) + " should be in group by clause.");
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Print a table (output related function).
     *
     * @param attribute attribute names.
     * @param type attribute types.
     * @param records data to print.
     */
    private void printTable(ArrayList<String> attribute, ArrayList<DataType> type, ArrayList<DataRecord> records) {
        if (records.isEmpty()) {
            System.out.println("Empty set.");
            return;
        }
        ArrayList<Integer> columnMaxLength = new ArrayList<>();
        for (String anAttribute : attribute) {
            columnMaxLength.add(anAttribute.length() + 1);
        }
        for (DataRecord record : records) {
            ArrayList<Object> blocks = record.getAllFieldsForOutput();
            for (int i = 0; i < blocks.size(); ++i) {
                columnMaxLength.set(i, Math.max(columnMaxLength.get(i), blocks.get(i).toString().length() + 1));
            }
        }
        String attrOutput = "";
        for (int i = 0; i < attribute.size(); ++i) {
            if (i > 0) {
                attrOutput += " | ";
            } else {
                attrOutput += "| ";
            }
            attrOutput += attribute.get(i);
            for (int j = 0; j < columnMaxLength.get(i) - attribute.get(i).length() - 1; ++j) {
                attrOutput += " ";
            }
        }
        attrOutput += " |";
        printSeparateLine(attrOutput);
        System.out.println(attrOutput);
        printSeparateLine(attrOutput);
        for (DataRecord record : records) {
            ArrayList<Object> blocks = record.getAllFieldsForOutput();
            for (int i = 0; i < blocks.size(); ++i) {
                if (i > 0) {
                    System.out.print(" |");
                } else {
                    System.out.print("|");
                }
                if (type.get(i).getType() == DataTypeIdentifier.INT) {
                    for (int j = 0; j < columnMaxLength.get(i) - blocks.get(i).toString().length(); ++j) {
                        System.out.print(" ");
                    }
                } else {
                    System.out.print(" ");
                }
                System.out.print(blocks.get(i));
                if (type.get(i).getType() == DataTypeIdentifier.VARCHAR) {
                    for (int j = 0; j < columnMaxLength.get(i) - blocks.get(i).toString().length() - 1; ++j) {
                        System.out.print(" ");
                    }
                }
            }
            System.out.print(" |");
            System.out.println();
        }
        printSeparateLine(attrOutput);
        if (records.size() == 1) {
            System.out.println(records.size() + " row in set.");
        } else {
            System.out.println(records.size() + " rows in set.");
        }
    }

    /**
     * Print separate line (like +----+-----+).
     *
     * @param attrOutput attribute output.
     */
    private void printSeparateLine(String attrOutput) {
        for (int i = 0; i < attrOutput.length(); ++i) {
            if (attrOutput.charAt(i) == '|') {
                System.out.print("+");
            } else {
                System.out.print("-");
            }
        }
        System.out.println();
    }

    @Override
    public boolean writeToDisk(String filename) {
        return true;
    }

    @Override
    public boolean restoreFromDisk(String filename) {
        File dbFile = new File("./" + DIRNAME + "/" + filename);
        if (!dbFile.exists()) {
            return true;
        }
        try {
            BufferedReader reader = new BufferedReader(new FileReader("./" + DIRNAME + "/" + filename));
            String input;
            while ((input = reader.readLine()) != null) {
                String[] tableAttr = input.split("\0");
                if (tableAttr[1].equalsIgnoreCase("MULTI")) {
                    Table multiIndexTable = new MultiIndexTable();
                    multiIndexTable.restoreFromDisk("./" + DIRNAME + "/" + tableAttr[0] + ".tlctable");
                    mTables.put(tableAttr[0], multiIndexTable);
                    mTableModified.put(tableAttr[0], Boolean.FALSE);
                } else {
                    System.err.println("Unsupported table type " + tableAttr[1] + ".");
                }
            }
            reader.close();
        } catch (FileNotFoundException e) {
            System.err.println("./" + DIRNAME + "/" + filename + ": no such file or directory.");
        } catch (IOException e) {
            System.err.println("./" + DIRNAME + "/" + filename + ": file I/O error.");
        }
        return false;
    }
}
